@model String
@{
    ViewData["Title"] = "Home Screen";
}
<div id="modalSettings" class="modal noselect" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Settings</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>
                        Color:
                    </label>
                    <input class="form-control" type="color" id="inpColor" />
                </div>
                <div class="form-group">
                    <label>
                        Size: <span id="spanBrushSize">5</span>
                    </label>
                    <input class="form-control" type="range" value="5" min="1" max="150" step="1" id="inpSize" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.1.9/p5.min.js" integrity="sha512-WIklPM6qPCIp6d3fSSr90j+1unQHUOoWDS4sdTiR8gxUTnyZ8S2Mr8e10sKKJ/bhJgpAa/qG068RDkg6fIlNFA==" crossorigin="anonymous"></script>
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script>
        let room = '@Model';
        let undoSessionId = Math.ceil(Math.random() * 1000000);
        let brushSettings = {
            color: '#000000',
            size: 5
            };
        // Setup HUB
        let connection = new signalR.HubConnectionBuilder().withUrl("/drawing").build();
        connection.on('ReceivePaint', receiveDrawing);
        connection.on('ReceiveHistory', receiveHistory);
        connection.start().then(() => { connection.invoke('SetRoom', room); });

        function setup() {
            createCanvas(window.innerWidth - 5, window.innerHeight - 10);
            background(255);
        }

        //function draw() {
        //    noFill();

        //    if (mouseIsPressed) {
        //        const point = {
        //            x: mouseX,
        //            y: mouseY,
        //            color: brushSettings.color,
        //            weight: brushSettings.size
        //        };
        //        currentPath.push(point);
        //    }

        //    paths.forEach(path => {
        //        beginShape();
        //        path.forEach(point => {
        //            stroke(point.color);
        //            strokeWeight(point.weight);
        //            vertex(point.x, point.y);
        //        });
        //        endShape();
        //    });
        //}

        //function mousePressed() {
        //    currentPath = [];
        //    paths.push(currentPath);
        //}

        $('#inpSize').on('input', function () {
            $('#spanBrushSize').text($(this).val());
        });

        function windowResized() {
            resizeCanvas(window.innerWidth - 5, window.innerHeight - 10, true);
        }

        function mouseDragged() {
            if (mouseX >= 0 && mouseY >= 0 && !$('#modalSettings').is(':visible'))
                sendPaint(Math.floor(mouseX), Math.floor(mouseY));
        }

        function mouseReleased() {
            undoSessionId = Math.ceil(Math.random() * 1000000);
            currentLine = null;
        }

        function paint(data) {
            fill(data.color);
            stroke(data.color);
            strokeWeight(data.size);
            line(data.startX, data.startY, data.endX, data.endY);
        }

        let currentLine = null;
        function sendPaint(x, y) {
            if (!currentLine) {
                currentLine = {};
                currentLine.startX = x;
                currentLine.startY = y;
            }
            else /*if (currentLine.startX != x && currentLine.startY != y)*/{
                currentLine.endX = x;
                currentLine.endY = y;

                currentLine.color = $('#inpColor').val();
                currentLine.size = $('#inpSize').val();
                currentLine.room = room;
                currentLine.undoSessionId = undoSessionId;
                debugger;
                connection.invoke("SendPaint", currentLine)
                currentLine.startX = currentLine.endX;
                currentLine.startY = currentLine.endY;
            }
        }

        //let currentLine = {done: false};
        //function sendPaint(x, y) {
        //    if (currentLine.done == false) {
        //        currentLine.startX = mouseX;
        //        currentLine.startY = mouseY;
        //        currentLine.done = true;
        //    }
        //    else {
        //    //debugger;
        //        currentLine.endX = mouseX;
        //        currentLine.endY = mouseY;
        //        currentLine.color = $('#inpColor').val();
        //        currentLine.size = $('#inpSize').val();
        //        connection.invoke("SendPaint", currentLine)
        //        paint(currentLine);
        //        currentLine.startX = currentLine.endX;
        //        currentLine.startX = currentLine.endX;
        //        currentLine.done = false;
        //    }

        //}

        function receiveDrawing(data) {
            paint(data);
        }

        function receiveHistory(data) {
            background(255);
            for (var i = 0; i < data.length; i++) {
                paint(data[i]);
            }
        }

        function undoLastLine() {
            connection.invoke("UndoLine", room);
        }

        $(document).keydown(function (e) {
            //debugger;
            if (e.key == 'l')
                returnToHome();
            else if (e.key == 'm')
                toggleMenu();
            else if (e.which === 90 && e.ctrlKey) {
                undoLastLine();
            }
        });

        function returnToHome() {
            if (confirm("Do you want to leave?"))
                window.location.pathname = '';
        }

        function toggleMenu() {
            if (!$('#modalSettings').is(':visible'))
                $('#modalSettings').modal('show');
            else
                $('#modalSettings').modal('hide');
        }

    </script>
}